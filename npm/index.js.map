{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;AASA,IAAM,WAAc,GAAA,iCAAA,CAAA;AAEpB,IAAM,YAAe,GAAA,WAAA,CAAA;AAiBrB,IAAM,mBAAA,GAAsB,CAAC,QAAqB,KAAA;AAChD,EAAA,OAAO,QAAS,CAAA,QAAA,CAAS,YAAY,CAAA,GACjC,SAAS,OAAQ,CAAA,YAAA,EAAc,EAAE,CAAA,GACjC,SAAS,OAAQ,CAAA,QAAA,EAAU,QAAS,CAAA,OAAA,CAAQ,QAAQ,CAAC,CAAA,CAAA;AAC3D,CAAA,CAAA;AAcA,eAAe,kBAAkB,KAAqC,EAAA;AACpE,EAAA,MAAM,cAAc,EAAC,CAAA;AACrB,EAAA,IAAI,SAAmB,EAAC,CAAA;AAExB,EAAA,KAAA,MAAW,WAAW,KAAO,EAAA;AAC3B,IAAA,IAAI,KAAQ,GAAA,EAAA,CAAG,IAAK,CAAA,OAAA,EAAS,EAAE,IAAM,EAAA,QAAA,EAAU,CAAA,CAAE,IAAI,CAAC,IAAA,KAAS,IAAK,CAAA,KAAA,CAAM,GAAG,CAAC,CAAA,CAAA;AAE9E,IAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,MAAA,WAAA,CAAY,KAAK,QAAS,CAAA,OAAA,CAAQ,KAAK,IAAK,CAAA,GAAG,CAAC,CAAC,CAAA,CAAA;AAAA,KACnD;AAEA,IAAA,OAAO,IAAM,EAAA;AACX,MAAA,MAAM,QAAQ,KAAM,CAAA,GAAA,CAAI,CAAC,IAAS,KAAA,IAAA,CAAK,CAAC,CAAC,CAAA,CAAA;AACzC,MAAA,IAAI,IAAI,GAAA,CAAI,KAAK,CAAA,CAAE,OAAO,CAAG,EAAA;AAC3B,QAAA,MAAA;AAAA,OACK,MAAA;AACL,QAAA,KAAA,GAAQ,MAAM,GAAI,CAAA,CAAC,SAAS,IAAK,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAAA,OAC3C;AAAA,KACF;AAEA,IAAM,MAAA,MAAA,GAAS,KAAM,CAAA,GAAA,CAAI,CAAC,IAAA,KAAS,KAAK,IAAK,CAAA,GAAG,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;AACxD,IAAA,MAAA,GAAS,CAAC,GAAG,MAAQ,EAAA,GAAG,MAAM,CAAA,CAAA;AAAA,GAChC;AAEA,EAAQ,OAAA,CAAA,GAAA,CAAI,OAAO,GAAI,CAAA,CAAC,MAAM,mBAAoB,CAAA,CAAC,CAAC,CAAC,CAAA,CAAA;AACrD,EAAA,OAAA,CAAQ,IAAI,WAAW,CAAA,CAAA;AAEvB,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEe,SAAR,mBAAoC,OAAoD,EAAA;AAC7F,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAU,OAAA,GAAA,EAAE,KAAO,EAAA,EAAG,EAAA,CAAA;AAAA,GACxB;AAEA,EAAA,IAAI,EAAE,KAAA,GAAQ,EAAC,EAAM,GAAA,OAAA,CAAA;AAErB,EAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAG,EAAA;AACzB,IAAA,KAAA,GAAQ,CAAC,KAAK,CAAA,CAAA;AAAA,GAChB;AAEA,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,WAAA;AAAA,IACN,MAAM,UAAa,GAAA;AACjB,MAAA,MAAM,kBAAkB,KAAK,CAAA,CAAA;AAAA,KAC/B;AAAA,IACA,IAAO,GAAA;AAAA,KAEP;AAAA,GACF,CAAA;AACF","file":"index.js","sourcesContent":["import nodepath from \"node:path\";\n\nimport fg, { Pattern } from \"fast-glob\";\nimport { createElement, type FC } from \"react\";\nimport type { NonIndexRouteObject } from \"react-router\";\nimport type { Plugin } from \"vite\";\n\n// const req = Module.createRequire(process.cwd());\n\nconst PLUGIN_NAME = \"vite-plugin-conventional-router\";\n\nconst mainPageFile = \"index.tsx\";\n\ntype PageModule = Partial<\n  Pick<\n    NonIndexRouteObject,\n    \"action\" | \"errorElement\" | \"caseSensitive\" | \"loader\" | \"shouldRevalidate\" | \"id\" | \"handle\"\n  > & { default: FC }\n>;\n\ntype ConventionalRouterProps = {\n  pages: Pattern | Pattern[];\n};\n\nconst errorElement = () => {\n  return createElement(\"div\", {}, [createElement(\"span\", {}, [\"Shit happens!\"])]);\n};\n\nconst filePathToRoutePath = (filepath: string) => {\n  return filepath.endsWith(mainPageFile)\n    ? filepath.replace(mainPageFile, \"\")\n    : filepath.replace(filepath, nodepath.extname(filepath));\n};\n\n// async function pageModuleImporter(file: string): Promise<PageModule> {\n//   try {\n//     const pageModule = (await import(file)) as PageModule;\n//     return pageModule;\n//   } catch (error) {\n//     console.log(error);\n//     return {\n//       errorElement: errorElement(),\n//     };\n//   }\n// }\n\nasync function collectRoutePages(pages: Pattern[]): Promise<string[]> {\n  const pageModules = [];\n  let routes: string[] = [];\n\n  for (const pattern of pages) {\n    let files = fg.sync(pattern, { deep: Infinity }).map((file) => file.split(\"/\"));\n\n    for (const file of files) {\n      pageModules.push(nodepath.resolve(file.join(\"/\")));\n    }\n\n    while (true) {\n      const group = files.map((file) => file[0]);\n      if (new Set(group).size > 1) {\n        break;\n      } else {\n        files = files.map((file) => file.slice(1));\n      }\n    }\n\n    const files_ = files.map((file) => file.join(\"/\")).flat();\n    routes = [...routes, ...files_];\n  }\n\n  console.log(routes.map((s) => filePathToRoutePath(s)));\n  console.log(pageModules);\n\n  return routes;\n}\n\nexport default function ConventionalRouter(options?: Partial<ConventionalRouterProps>): Plugin {\n  if (!options) {\n    options = { pages: [] };\n  }\n\n  let { pages = [] } = options;\n\n  if (!Array.isArray(pages)) {\n    pages = [pages];\n  }\n\n  return {\n    name: PLUGIN_NAME,\n    async buildStart() {\n      await collectRoutePages(pages);\n    },\n    load() {\n      // console.log(id);\n    },\n  };\n}\n"]}
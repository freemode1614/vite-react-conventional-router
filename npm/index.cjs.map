{"version":3,"sources":["../src/index.ts"],"names":["nodepath","fg"],"mappings":"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","file":"index.cjs","sourcesContent":["import nodepath from \"node:path\";\n\nimport fg, { Pattern } from \"fast-glob\";\nimport type { RouteObject } from \"react-router\";\nimport type { Plugin } from \"vite\";\n\n// const req = Module.createRequire(process.cwd());\n\nconst PLUGIN_NAME = \"vite-plugin-conventional-router\";\nconst PLUGIN_VIRTUAL_MODULE_NAME = \"virtual:routes\";\nconst PLUGIN_MAIN_PAGE_FILE = \"index.tsx\";\n\n// type PageModule = Partial<\n//   Pick<\n//     NonIndexRouteObject,\n//     \"action\" | \"errorElement\" | \"caseSensitive\" | \"loader\" | \"shouldRevalidate\" | \"id\" | \"handle\"\n//   > & { default: FC }\n// >;\n\ntype ConventionalRouterProps = {\n  pages: Pattern | Pattern[];\n};\n\nconst filePathToRoutePath = (filepath: string) => {\n  return filepath.endsWith(PLUGIN_MAIN_PAGE_FILE)\n    ? filepath.replace(PLUGIN_MAIN_PAGE_FILE, \"\").replace(/^\\//, \"\").replace(/\\/$/, \"\")\n    : filepath.replace(filepath, nodepath.extname(filepath)).replace(/^\\//, \"\").replace(/\\/$/, \"\");\n};\n\nfunction collectRoutePages(pages: Pattern[]): RouteObject[] {\n  const pageModules: string[] = [];\n  let routes: string[] = [];\n\n  for (const pattern of pages) {\n    let files = fg.sync(pattern, { deep: Infinity }).map((file) => file.split(\"/\"));\n\n    for (const file of files) {\n      pageModules.push(nodepath.resolve(file.join(\"/\")));\n    }\n\n    while (true) {\n      const group = files.map((file) => file[0]);\n      if (new Set(group).size > 1) {\n        break;\n      } else {\n        files = files.map((file) => file.slice(1));\n      }\n    }\n\n    const files_ = files.map((file) => file.join(\"/\")).flat();\n    routes = [...routes, ...files_];\n  }\n\n  return routes\n    .map((s) => filePathToRoutePath(s))\n    .map((route, index) => {\n      return {\n        path: route,\n        element: pageModules[index],\n      };\n    });\n}\n\nexport default function ConventionalRouter(options?: Partial<ConventionalRouterProps>): Plugin {\n  if (!options) {\n    options = { pages: [] };\n  }\n\n  let { pages = [] } = options;\n\n  if (!Array.isArray(pages)) {\n    pages = [pages];\n  }\n\n  return {\n    name: PLUGIN_NAME,\n    resolveId(source) {\n      if (source === PLUGIN_VIRTUAL_MODULE_NAME) {\n        return source;\n      }\n\n      return null;\n    },\n    async load(id) {\n      if (id === PLUGIN_VIRTUAL_MODULE_NAME) {\n        const routes = collectRoutePages(pages);\n        console.count(\"generate routes\");\n        return {\n          code: `\n          ${routes.map((route, index) => `import * as Page$${index} from \"${route.element}\"`).join(\"\\n\")}\n\n          export default [${routes.map(\n            (route, index) => `{\n              path: \"${route.path}\",\n              Component: Page$${index}.default,\n              shouldValidate: !!Page$${index}.shouldValidate\n            },`,\n          )}]`,\n        };\n      }\n      return null;\n    },\n  };\n}\n"]}
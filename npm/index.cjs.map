{"version":3,"sources":["../src/index.ts"],"names":["nodepath","fg"],"mappings":"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","file":"index.cjs","sourcesContent":["import nodepath from \"node:path\";\n\nimport fg, { Pattern } from \"fast-glob\";\nimport type { NonIndexRouteObject } from \"react-router\";\nimport type { Plugin } from \"vite\";\n\nconst PLUGIN_NAME = \"vite-plugin-conventional-router\";\nconst PLUGIN_VIRTUAL_MODULE_NAME = \"virtual:routes\";\nconst PLUGIN_MAIN_PAGE_FILE = \"index.tsx\";\n\nconst LAYOUT_FILE_NAME = \"layout\",\n  NOT_FOUND_FILE_NAME = \"404\",\n  ERROR_BOUNDARY_FILE_NAME = \"errorBoundary\";\n\nconst OPTIONAL_ROUTE_FLAG = \"$\",\n  DYNAMIC_ROUTE_FLAG = \"@\";\n\ntype ConventionalRouterProps = {\n  pages: Pattern | Pattern[];\n};\n\n/**\n * Strp slash before and after.\n */\nexport const stripSlash = (filepath: string) => {\n  return filepath.replace(/^\\//, \"\").replace(/\\/$/, \"\");\n};\n\n/**\n * Route path generate by file path.\n */\nexport const filePathToRoutePath = (filepath: string) => {\n  filepath = filepath.replace(nodepath.extname(filepath), \"\").replaceAll(\".\", \"/\") + nodepath.extname(filepath);\n\n  const path_ = filepath.endsWith(PLUGIN_MAIN_PAGE_FILE)\n    ? stripSlash(filepath.replace(PLUGIN_MAIN_PAGE_FILE, \"\"))\n    : stripSlash(filepath.replace(nodepath.extname(filepath), \"\"));\n\n  return path_\n    .split(\"/\")\n    .map((seg) => {\n      if (seg.startsWith(DYNAMIC_ROUTE_FLAG)) {\n        return seg.replace(DYNAMIC_ROUTE_FLAG, \":\");\n      }\n\n      if (seg.startsWith(OPTIONAL_ROUTE_FLAG)) {\n        const [, p] = new RegExp(`^\\\\${OPTIONAL_ROUTE_FLAG}(.+)`).exec(seg) ?? [];\n        return p ? `:${p}?` : seg;\n      }\n\n      return seg;\n    })\n    .join(\"/\");\n};\n\n/**\n * Collect files from FS by fast-glob.\n */\nexport const collectRoutePages = (pages: Pattern[]): NonIndexRouteObject[] => {\n  const pageModules: string[] = [];\n  let routes: string[] = [];\n\n  for (const pattern of pages) {\n    let files = fg.sync(pattern, { deep: Infinity }).map((file) => file.split(\"/\"));\n\n    for (const file of files) {\n      pageModules.push(nodepath.resolve(file.join(\"/\")));\n    }\n\n    while (true) {\n      const group = files.map((file) => file[0]);\n      if (new Set(group).size > 1) {\n        break;\n      } else {\n        files = files.map((file) => file.slice(1));\n      }\n    }\n\n    routes = [...routes, ...files.map((file) => file.join(\"/\")).flat()];\n  }\n\n  return routes\n    .map((s) => filePathToRoutePath(s))\n    .map((route, index) => {\n      return {\n        path: route,\n        element: pageModules[index],\n      };\n    });\n};\n\n/**\n * Sub-path evaluation.\n */\nexport const isSubPath = (parentPath: string, subPath: string) => {\n  if (\n    parentPath !== \"\" &&\n    subPath.startsWith(parentPath) &&\n    subPath.split(\"/\").length - parentPath.split(\"/\").length === 1\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * Two possible scenario\n * 1.\n * xx/xx/index.tsx\n * xx/xx/layout.tsx\n *\n * 2.\n * xx/xx.tsx\n * xx/xx.layout.tsx\n */\nexport const isLayoutRoute = (route: NonIndexRouteObject, layoutRoute: NonIndexRouteObject) => {\n  if (nodepath.dirname(route.element! as string) === nodepath.dirname(layoutRoute.element! as string)) {\n    return new RegExp(\n      `^([\\\\w\\\\${OPTIONAL_ROUTE_FLAG}\\\\${DYNAMIC_ROUTE_FLAG}]+\\\\.){0}(${LAYOUT_FILE_NAME})(\\\\.tsx)$`,\n    ).test(nodepath.basename(layoutRoute.element! as string));\n  }\n\n  return false;\n};\n\n/**\n *\n * Two possible scenario\n * 1.\n * xx/xx/index.tsx\n * xx/xx/errorBoundary.tsx\n *\n * 2.\n * xx/xx.tsx\n * xx/xx.errorBoundary.tsx\n */\nexport const isErrorBoundaryRoute = (route: NonIndexRouteObject, errorBoundaryRoute: NonIndexRouteObject) => {\n  if (nodepath.dirname(route.element! as string) === nodepath.dirname(errorBoundaryRoute.element! as string)) {\n    return new RegExp(\n      `^([\\\\w\\\\${OPTIONAL_ROUTE_FLAG}\\\\${DYNAMIC_ROUTE_FLAG}]+\\\\.){0}(${ERROR_BOUNDARY_FILE_NAME})(\\\\.tsx)$`,\n    ).test(nodepath.basename(errorBoundaryRoute.element! as string));\n  }\n\n  return false;\n};\n\n/**\n * Arrange routes.\n */\nexport const arrangeRoutes = (\n  routes: NonIndexRouteObject[],\n  parent: NonIndexRouteObject,\n  subRoutesPathAppendToParent: string[],\n): NonIndexRouteObject => {\n  const subs = routes.filter((route) => isSubPath(parent.path!, route.path!));\n  const layout = routes.find((route) => isLayoutRoute(parent, route));\n  const errorBoundary = routes.find((route) => isErrorBoundaryRoute(parent, route));\n\n  subRoutesPathAppendToParent.push(...subs.map((s) => \"/\" + s.path!));\n\n  if (layout) {\n    subRoutesPathAppendToParent.push(`/${layout.path!}`);\n  }\n\n  if (errorBoundary) {\n    subRoutesPathAppendToParent.push(`/${errorBoundary.path!}`);\n  }\n\n  Object.assign(parent, {\n    path: \"/\" + parent.path!,\n    children: subs.map((sub) => arrangeRoutes(routes, sub, subRoutesPathAppendToParent)),\n  });\n\n  if (layout) {\n    if (errorBoundary) {\n      Object.assign(layout, {\n        ErrorBoundary: errorBoundary.element! as string,\n      } as unknown as NonIndexRouteObject);\n    }\n\n    return Object.assign(layout, {\n      path: parent.path,\n      children: [parent],\n    });\n  }\n\n  return parent;\n};\n\n/**\n * Stringify routes data.\n */\nexport const stringifyRoutes = (routes: NonIndexRouteObject[]): string => {\n  const code = routes.map(\n    (route) => `{\n        async lazy(){\n          const { default: Component, ...rest }  = await import(\"${route.element}\")\n          return {\n            ...rest, Component,\n          }\n        },\n        path: \"${route.path}\",\n        children: ${!route.children ? \"[]\" : stringifyRoutes(route.children as NonIndexRouteObject[])}\n      },`,\n  );\n\n  return `[${code}]`;\n};\n\nexport default function ConventionalRouter(options?: Partial<ConventionalRouterProps>): Plugin {\n  if (!options) {\n    options = { pages: [] };\n  }\n\n  let { pages = [] } = options;\n\n  if (!Array.isArray(pages)) {\n    pages = [pages];\n  }\n\n  return {\n    name: PLUGIN_NAME,\n    resolveId(source) {\n      if (source === PLUGIN_VIRTUAL_MODULE_NAME) {\n        return source;\n      }\n\n      return null;\n    },\n    async load(id) {\n      if (id === PLUGIN_VIRTUAL_MODULE_NAME) {\n        const routes = collectRoutePages(pages);\n        const subRoutesPathAppendToParent: string[] = [];\n\n        const notFoundRoute = routes.find((route) => route.path === NOT_FOUND_FILE_NAME);\n\n        routes\n          .filter((r) => r.path!.split(\"/\").length === 1)\n          .map((route) => arrangeRoutes(routes, route, subRoutesPathAppendToParent));\n\n        const mapCallback = (r: NonIndexRouteObject) => {\n          if (r.path!.startsWith(\"/\")) {\n            return r;\n          } else {\n            return {\n              ...r,\n              path: `/${r.path}`,\n            };\n          }\n        };\n\n        const finalRoutes = routes.filter((r) => !subRoutesPathAppendToParent.includes(r.path!)).map(mapCallback);\n\n        if (notFoundRoute) {\n          finalRoutes.push({ ...notFoundRoute, path: \"*\" });\n        }\n\n        return {\n          code: `\n          const routes = ${stringifyRoutes(finalRoutes)};\n          console.log(routes);\n          export default routes;\n`,\n        };\n      }\n\n      return null;\n    },\n  };\n}\n"]}